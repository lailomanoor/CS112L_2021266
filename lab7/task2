#include <iostream>
using namespace std;

class MatrixType
{
    int **matrix;
    int rows,columns;

    MatrixType(int r, int c)
    {
        matrix = new int*[rows];

        for (int i = 0; i < columns; i++)
            matrix[i] = new int [columns];

        cout << "enter elements of class\n";
        for (int i = 0; i <  rows; i++)
            for (int j =0 ; j < columns; j++)
                cin >> matrix[i][j];

    }

    MatrixType(int r, int c, int e)
    {
        matrix = new int*[rows];

        for (int i = 0; i < columns; i++)
            matrix[i] = new int [columns];

        for (int i = 0; i <  rows; i++)
            for (int j =0 ; j < columns; j++)
                 matrix[i][j] = e;

    }
    MatrixType operator+(MatrixType m)
        {
            MatrixType temp(rows, columns, 0);
            if (rows == m.rows && columns == m.columns)
            {
                for (int i = 0; i <  rows; i++)
                    for (int j =0 ; j < columns; j++)
                        temp.matrix[i][j] = matrix[i][j] + m.matrix[i][j];
            }
            else
                cout << "matrix cannot be added\n";

            return temp;
        }

        MatrixType operator-(MatrixType m)
        {
            MatrixType temp(rows, columns, 0);
            if (rows == m.rows && columns == m.columns)
            {
                for (int i = 0; i <  rows; i++)
                    for (int j =0 ; j < columns; j++)
                        temp.matrix[i][j] = matrix[i][j] - m.matrix[i][j];
            }
            else
                cout << "matrix cannot be subtracted\n";

            return temp;
        }

        MatrixType operator *(MatrixType m)
        {
            if (columns == m.rows)
            {
                MatrixType temp(rows,m.columns, 0);

                for (int i = 0; i <  rows; i++)
                    for (int j =0 ; j < columns; j++)
                        for (int k = 0; k < )
            }
        }



};

int main()
{

}
